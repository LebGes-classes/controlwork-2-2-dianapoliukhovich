Ответы на вопросы:
1)Сериализация — это процесс сохранения состояния объекта в последовательность байт.
  Десериализация — это процесс восстановления объекта из этих байт.

Каждый Java-объект преобразуется в последовательность байт, что позволяет передавать объекты на разные компьютеры. В Java за процессы сериализации отвечает интерфейс Serializable.

 1. Сначала создаем объект класса Thread, потом переводим в состояние готовности вызывая метод start(). Используя метод run() мы заставляем поток выполняться. Мы также можем привести поток в состояние ожидания или блокировки, если допустим он ждет выполнения программой какого либо условия. В состояние завершения поток можно привести с помощью вызова метода stop() или если программа завершит свою работу

3)В Java потоки разделены на два основных типа: демон-потоки и не-демон-потоки. Этот подход помогает управлять выполнением программы и завершением приложения в зависимости от активности потоков.

Демон-потоки работают в фоновом режиме и предназначены для выполнения служебных задач, не являющихся критически важными для основной логики программы. Когда все не-демон-потоки завершают свою работу, JVM автоматически завершает выполнение программы, независимо от того, завершились демон-потоки или нет.

Не-демон-потоки считаются основными потоками выполнения. Если есть хотя бы один не-демон-поток, JVM будет ждать завершения всех не-демон-потоков перед завершением выполнения программы.

Если поток уже запущен, изменение его демон-статуса не оказывает влияния, поэтому управление зависит только при запуске новых потоков.


4)Java IO (input-output) является потокоориентированным, а Java NIO (new/non-blocking io) – буфер-ориентированным. Потокоориентированный ввод подразумевает чтение из потока в поток одного или нескольких байт в единицу времени поочередно. Данная информация нигде не кэшируются. Таким образом, невозможно произвольно двигаться по потоку данных вперед или назад.